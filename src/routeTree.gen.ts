/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TermOfServiceImport } from './routes/term-of-service'
import { Route as TaskListImport } from './routes/task-list'
import { Route as PrivacyPolicyImport } from './routes/privacy-policy'
import { Route as IndexImport } from './routes/index'
import { Route as AuthRegisterImport } from './routes/auth/register'
import { Route as AuthLoginImport } from './routes/auth/login'

// Create/Update Routes

const TermOfServiceRoute = TermOfServiceImport.update({
  id: '/term-of-service',
  path: '/term-of-service',
  getParentRoute: () => rootRoute,
} as any)

const TaskListRoute = TaskListImport.update({
  id: '/task-list',
  path: '/task-list',
  getParentRoute: () => rootRoute,
} as any)

const PrivacyPolicyRoute = PrivacyPolicyImport.update({
  id: '/privacy-policy',
  path: '/privacy-policy',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthRegisterRoute = AuthRegisterImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => rootRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/privacy-policy': {
      id: '/privacy-policy'
      path: '/privacy-policy'
      fullPath: '/privacy-policy'
      preLoaderRoute: typeof PrivacyPolicyImport
      parentRoute: typeof rootRoute
    }
    '/task-list': {
      id: '/task-list'
      path: '/task-list'
      fullPath: '/task-list'
      preLoaderRoute: typeof TaskListImport
      parentRoute: typeof rootRoute
    }
    '/term-of-service': {
      id: '/term-of-service'
      path: '/term-of-service'
      fullPath: '/term-of-service'
      preLoaderRoute: typeof TermOfServiceImport
      parentRoute: typeof rootRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof rootRoute
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/privacy-policy': typeof PrivacyPolicyRoute
  '/task-list': typeof TaskListRoute
  '/term-of-service': typeof TermOfServiceRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/privacy-policy': typeof PrivacyPolicyRoute
  '/task-list': typeof TaskListRoute
  '/term-of-service': typeof TermOfServiceRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/privacy-policy': typeof PrivacyPolicyRoute
  '/task-list': typeof TaskListRoute
  '/term-of-service': typeof TermOfServiceRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/privacy-policy'
    | '/task-list'
    | '/term-of-service'
    | '/auth/login'
    | '/auth/register'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/privacy-policy'
    | '/task-list'
    | '/term-of-service'
    | '/auth/login'
    | '/auth/register'
  id:
    | '__root__'
    | '/'
    | '/privacy-policy'
    | '/task-list'
    | '/term-of-service'
    | '/auth/login'
    | '/auth/register'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PrivacyPolicyRoute: typeof PrivacyPolicyRoute
  TaskListRoute: typeof TaskListRoute
  TermOfServiceRoute: typeof TermOfServiceRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PrivacyPolicyRoute: PrivacyPolicyRoute,
  TaskListRoute: TaskListRoute,
  TermOfServiceRoute: TermOfServiceRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/privacy-policy",
        "/task-list",
        "/term-of-service",
        "/auth/login",
        "/auth/register"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/privacy-policy": {
      "filePath": "privacy-policy.tsx"
    },
    "/task-list": {
      "filePath": "task-list.tsx"
    },
    "/term-of-service": {
      "filePath": "term-of-service.tsx"
    },
    "/auth/login": {
      "filePath": "auth/login.tsx"
    },
    "/auth/register": {
      "filePath": "auth/register.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
